import fetch from 'node-fetch';
import {endpoint} from '../src/express_endpoint';

test('integration test', async () => {
  const privateKey = '0x177ee777e72b8c042e05ef41d1db0f17f1fcb0e8150b37cfad6993e4373bdf10';
  const timestamp = 1563606000;

  async function fetchPrices(): Promise<[number, object]> {
    return [timestamp, {'eth': 260.0, 'zrx': 0.58}];
  }

  const port = 10123;
  const app = await endpoint(privateKey, fetchPrices).listen(port);

  const response1 = await fetch(`http://localhost:${port}/prices.json`);
  expect(response1.ok).toBe(true);
  expect(await response1.json()).toEqual({
    messages: [
      "0x0000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000005d32bbf000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000f7f49000000000000000000000000000000000000000000000000000000000000000006707269636573000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034554480000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000005d32bbf000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000008d9a00000000000000000000000000000000000000000000000000000000000000006707269636573000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000035a52580000000000000000000000000000000000000000000000000000000000"
    ],
    prices: {
      eth: 260,
      zrx: 0.58,
    },
    timestamp: timestamp,
    signatures: [
      "0x1ad78f3fadc4ff82206e9144da21a9e3c7150054af3b629c134356b78571892d7a19419a4841af321cf9d3a537995cb75378984b61461316e873979a3c071ce0000000000000000000000000000000000000000000000000000000000000001c",
      "0xd76c7a01c9b12bcf0e759f42d79a867ea92f1a7ad2b96c49feede44392fe45684bdd51dd3f18fd24b54d65526e36eeff0c8b0d108d2cdde35f18e4c1cd7f059f000000000000000000000000000000000000000000000000000000000000001b"
    ]
  });

  const response2 = await fetch(`http://localhost:${port}/prices.json?symbols=eth,zrx`);
  expect(response2.ok).toBe(true);
  expect(await response2.json()).toEqual({
    messages: [
      "0x0000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000005d32bbf000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000f7f49000000000000000000000000000000000000000000000000000000000000000006707269636573000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034554480000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000005d32bbf000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000008d9a00000000000000000000000000000000000000000000000000000000000000006707269636573000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000035a52580000000000000000000000000000000000000000000000000000000000"
    ],
    prices: {
      eth: 260,
      zrx: 0.58
    },
    timestamp: timestamp,
    signatures: [
      "0x1ad78f3fadc4ff82206e9144da21a9e3c7150054af3b629c134356b78571892d7a19419a4841af321cf9d3a537995cb75378984b61461316e873979a3c071ce0000000000000000000000000000000000000000000000000000000000000001c",
      "0xd76c7a01c9b12bcf0e759f42d79a867ea92f1a7ad2b96c49feede44392fe45684bdd51dd3f18fd24b54d65526e36eeff0c8b0d108d2cdde35f18e4c1cd7f059f000000000000000000000000000000000000000000000000000000000000001b"
    ]
  });

  const response3 = await fetch(`http://localhost:${port}/prices.json?symbols=etH`);
  expect(response3.ok).toBe(true);
  expect(await response3.json()).toEqual({
    messages: [
      "0x0000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000005d32bbf000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000f7f49000000000000000000000000000000000000000000000000000000000000000006707269636573000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034554480000000000000000000000000000000000000000000000000000000000"
    ],
    prices: {
      eth: 260
    },
    timestamp: timestamp,
    signatures: [
      "0x1ad78f3fadc4ff82206e9144da21a9e3c7150054af3b629c134356b78571892d7a19419a4841af321cf9d3a537995cb75378984b61461316e873979a3c071ce0000000000000000000000000000000000000000000000000000000000000001c"
    ]
  });

  const response4 = await fetch(`http://localhost:${port}/prices.json?symbols=ZRX`);
  expect(response4.ok).toBe(true);
  expect(await response4.json()).toEqual({
    messages: [
      "0x0000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000005d32bbf000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000008d9a00000000000000000000000000000000000000000000000000000000000000006707269636573000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000035a52580000000000000000000000000000000000000000000000000000000000"
    ],
    prices: {
      zrx: 0.58
    },
    timestamp: timestamp,
    signatures: [
      "0xd76c7a01c9b12bcf0e759f42d79a867ea92f1a7ad2b96c49feede44392fe45684bdd51dd3f18fd24b54d65526e36eeff0c8b0d108d2cdde35f18e4c1cd7f059f000000000000000000000000000000000000000000000000000000000000001b"
    ]
  });

  const response5 = await fetch(`http://localhost:${port}/prices.json?symbols=bat`);
  expect(response5.ok).toBe(true);
  expect(await response5.json()).toEqual({
    messages: [],
    prices: {},
    timestamp: timestamp,
    signatures: []
  });

  await new Promise(ok => app.close(ok));
});
